# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_3eM0rwycRdYNVPRzQtWZVM4H4OVa-O
"""

#prepare a time series model for predictin of next day temperature

#import the libraries

#Import the libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM , Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.losses import MeanSquaredError

#load the dataset into dataframe
#parse_date:is used to convert the date column into datetime objects
df=pd.read_csv("daily_minimum_temps.csv",parse_dates=["Date"],index_col="Date")

#checkin the first 5 rows of DF
df.head()

#preprocessing the data
#finding out the missing values
df.isnull().sum()

df.isna().sum(axis=0)

df.shape

#EXAMPLE:string format for a numeric value can be
stock="one hundred three"
stock="NaN"

#converting the string values to numeirc values by removing the double quotes and if the string values doesnt make any sense
#we will use coerce to convert strint to NaN
df["Temp"]=pd.to_numeric(df["Temp"],errors="coerce")

df=df.dropna()

#Normalize the data
scaler=MinMaxScaler()
data_scaled=scaler.fit_transform(df["Temp"].values.reshape(-1,1))

#seq length for temperature
seq_length=30

#function for creating sequences
def create_sequences(data_scaled,seq_length):
  X,y=[],[]
  for i in range(len(data_scaled)-seq_length):
    X.append(data_scaled[i:i+seq_length])
    y.append(data_scaled[i+seq_length])
  return np.array(X),np.array(y)

#Calling the Function and storing the values in list X and y
X,y=create_sequences(data_scaled,seq_length)

#Divide the dataset into train and test and split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1,shuffle=False)

#Building the RNN model
model=Sequential([
    LSTM(64,activation="relu",input_shape=(seq_length,1)),
    Dense(1)#Since output will be single value
])

#compile
model.compile(optimizer="adam",loss=MeanSquaredError())

#training
model.fit(X_train,y_train,epochs=20,batch_size=32)

#make predictions
y_pred_scaled=model.predict(X_test)

#Inverse Transform the scaled data
y_pred_scaled=np.clip(y_pred_scaled,0,1)
y_pred=scaler.inverse_transform(y_pred_scaled)
y_test_actual=scaler.inverse_transform(y_test)

#Predict the next day temperature
last_sequence = data_scaled[-seq_length:].reshape(1, seq_length, 1)
next_temp_scaled=model.predict(last_sequence)
next_temp_scaled=np.clip(next_temp_scaled,0,1)
next_day_temp=scaler.inverse_transform(next_temp_scaled)

print("the next day's temperature is:",next_day_temp)

# Save the trained model
# Save using the new Keras format
model.save("temperature_rnn_model.keras")  # saves the model architecture, weights, and optimizer state

# Save the scaler using joblib
import joblib
joblib.dump(scaler, "temperature_scaler.save")

